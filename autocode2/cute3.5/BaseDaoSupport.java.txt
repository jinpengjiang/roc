//暂时仅支持单行注释，通过//标示。此行为注释，生成的物理文件不包含。
//暂时仅支持单行注释，通过//标示。此行为注释，生成的物理文件不包含。
//暂时仅支持单行注释，通过//标示。此行为注释，生成的物理文件不包含。
//说明。。。
//$..$标记需要解析的标签，如$getJavaPah()$表示根据包名计算的java文件保存路径。
//内部变量定义区域
//根据#FILE得知物理文件保存路径、名称
//#FILE=$getJspPah()$/$getClassInstance()$Add.jsp
//#FILE=$getJavaPah()$/dao/$getClass()$DAO.java
#FILE=$getJavaPah()$/hibernate/BaseDaoSupport.java
//根据#LEVEL得知文件级别：分模块级别，单个类[数据表]级别
//#LEVEL=CLASS
#LEVEL=MODULE
//以下为输出的物理文件文件内容
//**Action.java样例
package $getPackage()$.hibernate;


import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import java.util.List;

public class BaseDaoSupport extends HibernateDaoSupport {
	
	protected PageCallback pageCallback;

	protected CountCallback countCallback;

	public CountCallback getCountCallback() {
		return countCallback;
	}

	public void setCountCallback(CountCallback countCallback) {
		this.countCallback = countCallback;
	}

	public PageCallback getPageCallback() {
		return pageCallback;
	}

	public void setPageCallback(PageCallback pageCallback) {
		this.pageCallback = pageCallback;
	}
	//通用查询 记录数
	public Long getAllRowsByCondition(List condition,String model){
		
	      String hql = "select count(*) from " + model+ " as model where 1=1 ";
	      for(int i=0;i<condition.size();i++) {
				ConditionType ct = (ConditionType)condition.get(i);
				hql+="and model."+ct.getName()+" "+ct.getType()+" '"+ct.getValue()+"'";
	      }
	      countCallback.setHql(hql);
	  	  return (Long)getHibernateTemplate().execute(countCallback);
		}
	//通用查询 记录
	public List findByHqlByCondition(List condition,String model,int startRows, int pageSize){
		pageCallback.setStartRow(startRows);
		pageCallback.setPageSize(pageSize);
	
		String hql = "from "+ model +" as model where 1=1 ";
	    for(int i=0;i<condition.size();i++) {
			ConditionType ct = (ConditionType)condition.get(i);
			hql+="and model."+ct.getName()+" "+ct.getType()+" '"+ct.getValue()+"'";
	    }
		pageCallback.setHql(hql);
		return getHibernateTemplate().executeFind(pageCallback);
	
	} 	
}
