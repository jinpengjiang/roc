//暂时仅支持单行注释，通过//标示。此行为注释，生成的物理文件不包含。
//暂时仅支持单行注释，通过//标示。此行为注释，生成的物理文件不包含。
//暂时仅支持单行注释，通过//标示。此行为注释，生成的物理文件不包含。
//说明。。。
//$..$标记需要解析的标签，如$getJavaPah()$表示根据包名计算的java文件保存路径。
//内部变量定义区域
//根据#FILE得知物理文件保存路径、名称
//#FILE=$getJspPah()$/$getClassInstance()$Add.jsp
//#FILE=$getJavaPah()$/dao/$getClass()$DAO.java
#FILE=$getJavaPah()$/util/Page.java
//根据#LEVEL得知文件级别：分模块级别，单个类[数据表]级别
//#LEVEL=CLASS
#LEVEL=MODULE
//以下为输出的物理文件文件内容
//**Action.java样例
package $getPackage()$.util;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * 分页对象. 包含当前页数据及分页信息如总记录数.
 * @author rex
 */
@SuppressWarnings("serial")
public class Page implements Serializable { 

  /**
   * 页缺省大小
   */
  private static int DEFAULT_PAGE_SIZE = 20;

  /**
   * 每页的记录数,缺省为20
   */
  private int pageSize = DEFAULT_PAGE_SIZE; 

  /**
   * 当前页第一条数据在List中的位置,从0开始
   */
  private long start; 

  /**
   * 当前页中存放的记录,类型一般为List
   */
  private Object data; 

  /**
   * 总记录数
   */
  private long totalCount; 
  
  /**
   * 列头
   */
  private List<String> columnlist;
  
  /**
   * 
   */
  private String message;
  
  /**
   * 
   */
  private String rowcount;
  
  /**
   * 当前页
   */
  private int currentPageNo;

  /**
   * <p>。</p>
   * @return String
   */
  public String getRowcount() {
    return rowcount;
  }

  /**
   * <p>。</p>
   * @param rowcount
   */
  public void setRowcount(String rowcount) {
    this.rowcount = rowcount;
  }

  /**
   * <p>。</p>
   * @return String
   */
  public String getMessage() {
    return message;
  }

  /**
   * <p>。</p>
   * @param message
   */
  public void setMessage(String message) {
    this.message = message;
  }

  /**
   * 构造方法，只构造空页.
   */
  public Page() {
    this(1, 0, DEFAULT_PAGE_SIZE, new ArrayList<Object>());
  }

  public Page(int currentPageNo) {
	    this(currentPageNo, 0, DEFAULT_PAGE_SIZE, new ArrayList<Object>()); 
  }
  
  /**
   * 默认构造方法. 
   * @param start  本页数据在数据库中的起始位置
   * @param totalSize 数据库中总记录条数
   * @param pageSize 本页容量
   * @param data 本页包含的数据
   */
  public Page(int  currentPageNo, long totalSize, int pageSize, Object data) {
    this.pageSize = pageSize;
    this.currentPageNo = currentPageNo;
    this.totalCount = totalSize;
    this.data = data;
  }

  /**
   * 取总记录数.
   * @return long
   */
  public long getTotalCount() {
    return this.totalCount;
  }

  /**
   * 取总页数.
   * @return long
   */
  public long getTotalPageCount() {
    if (getTotalCount() % pageSize == 0)
      return getTotalCount() / pageSize;
    else
      return getTotalCount() / pageSize + 1;
  }

  /**
   * 取每页数据容量.
   * @return int
   */
  public int getPageSize() {
    return pageSize;
  }
  
  /**
   * <p>设置页大小。</p>
   * @param pageSize
   */
  public void setPageSize(int pageSize) {
    this.pageSize = pageSize;
  }

  /**
   * 取当前页中的记录.
   * @return List<Object>
   */
  public Object getResult() {
    return data;
  }

  /**
   * <p>设置数据记录。</p>
   * @param obj
   */
  public void setResult(Object obj) {
    data = obj;
  }

  /**
   * 取该页当前页码,页码从1开始.
   * @return long
   */
  public int getCurrentPageNo() {
    return currentPageNo;
  }
  
  /**
   * <p>设置当前页码。</p>
   * @param pageNo
   */
  public void setCurrentPageNo(int pageNo) {
    this.currentPageNo = pageNo;
  }

  /**
   * 该页是否有下一页.
   * @return boolean
   */
  public boolean hasNextPage() {
    return this.getCurrentPageNo() < this.getTotalPageCount() - 1;
  }

  /**
   * 该页是否有上一页.
   * @return boolean
   */
  public boolean hasPreviousPage() {
    return this.getCurrentPageNo() > 1;
  }

  /**
   * 获取任一页第一条数据在数据集的位置，每页条数使用默认值.
   * @param pageNo 
   * @return int
   * @see #getStartOfPage(int,int)
   */
  public  int getCurrentStartOfPage() {
	    return getStartOfPage( currentPageNo,pageSize);
  }
  
  public  int getCurrentStartOfPageDefault() {
	    return getStartOfPage( currentPageNo,DEFAULT_PAGE_SIZE);
   }
  
  protected static int getStartOfPage(int pageNo) {
    return getStartOfPage(pageNo, DEFAULT_PAGE_SIZE);
  }

  /**
   * 获取任一页第一条数据在数据集的位置. 
   * @param pageNo 从1开始的页号
   * @param pageSize 每页记录条数
   * @return 该页第一条数据
   */
  public static int getStartOfPage(int pageNo, int pageSize) {
    return (pageNo - 1) * pageSize;
  }

  /**
   * <p>列头。</p>
   * @return List
   */
  public List<String> getColumnlist() {
    return columnlist;
  }

  /**
   * <p>列头。</p>
   * @param columnlist
   */
  public void setColumnlist(List<String> columnlist) {
    this.columnlist = columnlist;
  }
  
  /**
   * 分页栏函数 必需被包含在某个Form之中
   * @return String 分栏字符串
   * 分页按钮、选择行数、页数都可提交form
   */
 public String getFooter() {
    StringBuffer strBuf = new StringBuffer("");
    int pageNo = (int) getCurrentPageNo();//取该页当前页码,页码从1开始. 
    int pageTotalNo = (int) getTotalPageCount();//取总页数
    int prev = pageNo - 1;
    int next = pageNo + 1;

    
    strBuf.append("<table width='100%' border='0' cellspacing=''0' cellpadding='0'><tr>");
    strBuf.append("<td class='STYLE4'>&nbsp;&nbsp;共有"+this.totalCount +"  条记录，");
    
    strBuf.append("每页<SELECT size=1 height='15' name=pageSize").append(" onchange='this.form.pageNo.value=1;this.form.pageSize.value=this.value;this.form.submit();'>");

if (pageSize == 3) {
  strBuf.append("<OPTION value=3 selected>3</OPTION>");
}
else {
  strBuf.append("<OPTION value=3>3</OPTION>");
}

if (pageSize == 10) {
  strBuf.append("<OPTION value=10 selected>10</OPTION>");
}
else {
  strBuf.append("<OPTION value=10>10</OPTION>");
}

if (pageSize == 15) {
  strBuf.append("<OPTION value=15 selected>15</OPTION>");
}
else {
  strBuf.append("<OPTION value=15>15</OPTION>");
}

if (pageSize == 20) {
  strBuf.append("<OPTION value=20 selected>20</OPTION>");
}
else {
  strBuf.append("<OPTION value=20>20</OPTION>");
}
if (pageSize == 30) {
  strBuf.append("<OPTION value=30 selected>30</OPTION>");
}
else {
  strBuf.append("<OPTION value=30>30</OPTION>");
}

if (pageSize == 50) {
  strBuf.append("<OPTION value=50 selected>50</OPTION>");
}
else {
  strBuf.append("<OPTION value=50>50</OPTION>");
}

if (pageSize == 100) {
  strBuf.append("<OPTION value=100 selected>100</OPTION>");
}
else {
  strBuf.append("<OPTION value=100>100</OPTION>");
}
strBuf.append("</SELECT>");
//总页数
strBuf.append("条，当前第 "+pageNo+"/"+pageTotalNo+" 页，</td>");
    
    
    strBuf.append("<td><table border='0' align='right' cellpadding='0' cellspacing='0'><tr>");
    strBuf.append("<td width='40'>");
    //按钮
    if (pageNo > 1) {
      strBuf.append("<INPUT class=button type=submit height='15' value=首页 name=firs onclick='this.form.pageNo.value=1'>&nbsp;");
    }
    else {
      strBuf.append("<INPUT class=button type=submit height='15' value=首页 name=firs disabled>&nbsp;");
    }
    strBuf.append("</td><td width='40'>");
    if (pageNo > 1) {
      strBuf.append("<INPUT class=button type=submit height='15' value=上页 name=prev onclick='this.form.pageNo.value="
              + prev + "'>&nbsp;");
    }
    else {
      strBuf.append("<INPUT class=button type=submit height='15' value=上页 name=prev disabled>&nbsp;");
    }
    strBuf.append("</td><td width='40'>");
    if (pageNo < pageTotalNo) {
      strBuf.append("<INPUT class=button type=submit height='15' value=下页 name=next onclick='this.form.pageNo.value="
              + next + ";' >&nbsp;");
    }
    else {
      strBuf.append("<INPUT class=button type=submit height='15' value=下页 name=next disabled>&nbsp;");
    }
    strBuf.append("</td><td width='40'>");
    if (pageTotalNo > 1 && pageNo != pageTotalNo) {
      strBuf.append("<INPUT class=button type=submit height='15' value=末页 name=last onclick='this.form.pageNo.value="
              + pageTotalNo + "'>&nbsp;");
    }
    else {
      strBuf.append("<INPUT class=button type=submit height='15' value=末页 name=last disabled>&nbsp;");
    }
    strBuf.append("</td>");

    
    strBuf.append("<td width='100'><div align='center'><span class='STYLE1'>转到");
    /*
     * 问题是具体页面的查询按钮，是按用户选择条件并且在当前页数范围内查询，因此，如果不是第一页，结果查询不准
     * 解决，通过查询按钮查询时，把pages设为1
     */
    if (pageTotalNo <= 200) {
      strBuf
      .append("<SELECT size=1 height='15' name=Pagelist onchange='this.form.pageNo.value=this.value;this.form.submit();'>");
      for (int i = 1; i < pageTotalNo + 1; i++) {
        if (i == pageNo) {
          strBuf.append("<OPTION value=" + i + " selected>" + i + "</OPTION>");
        }
        else {
          strBuf.append("<OPTION value=" + i + ">" + i + "</OPTION>");
        }
      }
      strBuf.append("</SELECT>页</span></div></td>");
    } else {
      strBuf.append("<input class='text' type='text' size='5' name='Pagelist' value='"+pageNo+"' >").append("<input type='button' class='button' value='go' onClick='if(!(/^[0-9]*$/).test(this.form.Pagelist.value)) {alert(\"请输入数字类型\");return;};if(Pagelist.value>"+pageTotalNo+"){alert(\"超出总页数,请重新输入!\");return;} this.form.pageNo.value=this.form.Pagelist.value;this.form.submit();'>");
    }
    //
    strBuf.append("<td><INPUT class=button type=hidden  value=" + pageNo
        + " name=\"pageNo\" > ");
    strBuf.append("<INPUT class=button type=hidden  value=" + pageSize
        + " name=\"pageSize\"> ");
    strBuf.append("<INPUT class=button type=hidden  value=" + this.totalCount
        + " name=\"totalCount\"></td> ");
    strBuf.append("</tr></table>");
    return strBuf.toString();
  }

  public String toString() {
    return getFooter();
  }

  /**
   * <p>注入总记录数</p>
   * @author 张炳祥
   * @param totalCount
   */
  public void setTotalCount(long totalCount) {
    this.totalCount = totalCount;
  } 
}
