//暂时仅支持单行注释，通过//标示。此行为注释，生成的物理文件不包含。
//暂时仅支持单行注释，通过//标示。此行为注释，生成的物理文件不包含。
//暂时仅支持单行注释，通过//标示。此行为注释，生成的物理文件不包含。
//说明。。。
//$..$标记需要解析的标签，如$getJavaPah()$表示根据包名计算的java文件保存路径。
//内部变量定义区域
//根据#FILE得知物理文件保存路径、名称
//#FILE=$getJspPah()$/$getClassInstance()$Add.jsp
//#FILE=$getJavaPah()$/dao/$getClass()$DAO.java
#FILE=$getJavaPah()$/util/Encryption.java
//根据#LEVEL得知文件级别：分模块级别，单个类[数据表]级别
//#LEVEL=CLASS
#LEVEL=MODULE
//以下为输出的物理文件文件内容
//**Action.java样例
package $getPackage()$.util;

/**
 * 字符串加密类
 * 
 * @author Jesse Lu
 */
public class Encryption {

	/**
	 * 密码默认加密算法
	 * 
	 * @param code
	 * @return
	 */
	public static String encrypt(String code) {
		return encrypt(code, 0);
	}

	/**
	 * 密码加密算法
	 * 
	 * @param code	需要加密的字符串
	 * @param open	加密算法加长开关
	 * @return
	 */
	public static String encrypt(String code, int open) {
		String is_list;
		String[] is_thm = new String[20];
		String is_result = "";
		String is_char;
		String is_sort = "";
		int i;
		int j;
		// int k;
		int[] is_count = new int[70];

		is_list = "abcdefghijklmnopqrstuvw-xyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

		is_thm[1] = "qM3NwB-eV1CrXtZ2LyKuJ4HiGoFpDaS6AsPdOfIgUhY8TjRkE7WlQzx9cv5bn0m";
		is_thm[2] = "mQnA8ZbW0SvXcExD9CzRlFkV6TjGhB7YgHfNd-UsJ5MaIpKo3OiLuP1ytr4ew2q";
		is_thm[3] = "1qQaAzW2SwEsDxR3FeTdGcY4HrUfJvIK5tg-OLbP6ZyXhCn7uVjBmNM8ik9ol0p";
		is_thm[4] = "1QqAwZeXrStW-y2u3iEoDpCaVsFdRf4g5hTjGkBlmNnHbYv6c7xUzJMKI89OLP0";
		is_thm[5] = "0Pz9xOcLv8bInKmlMkJjUh7g6fYdHsNaBpGoTi-5u4yRtFrVCDEe3w2qWSXZAQ1";
		is_thm[6] = "AqCwXe0dsNaTz9xcHrRtyfgVhvK3bnMuG-io1jkPlmpQW8ESD5ZY7F2BU6IOJ4L";
		is_thm[7] = "PLq2wOKI6erJUHty3YGT-uiFR5DES1opWAlkQMNjhB8VCXgfZds0a7zxc4vb9nm";
		is_thm[8] = "pDlmASFkVo09iPjnKLbhZJNu87yXCgvBOHcft-YUI65rdxRTzsWEe43waq21qGM";
		is_thm[9] = "sDxR1qQadG-cbP6Z8ik9ol0pyXhCnTfJvIK5tgOLjBmNM7uVY4HrUAzW2SwE3Fe";

		for (i = 0; i < is_list.length(); i++) {
			is_count[i] = 0;
		}

		for (i = 0; i < code.length(); i++) {
			is_char = code.substring(i, i + 1);
			j = is_list.indexOf(is_char);
			if (j == -1) {
				is_result = null;
				return is_result;
			}
			is_count[j] = is_count[j] + 1;
			is_char = is_thm[is_count[j]].substring(j, j + 1);
			is_result = is_result + is_char;
			is_sort = is_sort + is_count[j];
			if (is_count[j] == 9) {
				is_count[j] = 0;
			}
		}

		if (open != 0) {
			is_result = is_result + "|" + is_sort;
		}

		return is_result;
	}
}
